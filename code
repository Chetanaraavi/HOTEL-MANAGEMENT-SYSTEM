use App\Models\CheckIn; 
use App\Repositories\CheckIn\CheckInRepositoryInterface; 
use App\Repositories\Payment\PaymentRepositoryInterface;
use App\Services\CheckIn\CheckInServiceInterface; 
use App\Services\Payment\PaymentServiceInterface; 
use App\Models\Payment; 
use Illuminate\Contracts\Foundation\Application; 
use Illuminate\Contracts\View\Factory;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request; 
use Illuminate\Http\Response; 
use Illuminate\Routing\Redirector;
use Illuminate\View\View; 
class PaymentController extends Controller 
{ protected $paymentRepository; protected $paymentService; protected $checkinRepository; protected $checkinService; 
/** 
*	PaymentController constructor. 
* 
*	@param PaymentRepositoryInterface $paymentRepository 
*	@param PaymentServiceInterface $paymentService 
*/ 19 4 public function construct(PaymentRepositoryInterface $paymentRepository, 
PaymentServiceInterface $paymentService, CheckInRepositoryInterface 
$checkinRepository, CheckInServiceInterface $checkinService) 
{ 
$this->paymentRepository = $paymentRepository; 
$this->paymentService = $paymentService; 
$this->checkinRepository = $checkinRepository; 
$this->checkinService = $checkinService; 
} 
/** 
*	Display the list of payments. 
*	*/ public function index() 
{ return view('payments.index', [ 
'payments' => $this->paymentRepository->all(), 
]); 
} 
/** 
*	Show the form to add new payment. 
* 
*	@return Application|Factory|View 
*/ public function create() 
{ 19 4 return view('payments.create', [ 
'checkins' => $this->checkinRepository->query() 
->doesntHave('payments')->get(), 
]); 
} 
/** 
*	Displays the payment addition form with the billing information. 
* 
*	@param CheckIn $checkin 
*	@return Application|Factory|View 
*/ public function createWithBilling(CheckIn $checkin) 
{ return view('payments.create', [ 
'checkins' => $this->checkinRepository->all(), 
'selectedCheckin' => $checkin, 
'data' => $this->checkinService->getBillAmount($checkin) 
]); 
} 
/** 
*	Add a new payment. 
* 
*	@param Request $request 
*	@param CheckIn $checkin 
*	@return Application|RedirectResponse|Redirector 
19 4 */ public function store(Request $request, CheckIn $checkin) 
{ 
$request->validate([ 
'discount' => 'nullable|numeric|min:0|max:1000000000', 
'payer' => 'required|in:agent,customer' 
]); 
return $this->paymentService->create($request) 
? redirect(route('payments.index'))->with('success', 'New payment added successfully.') 
: back()->with('error', 'New payment could not be added.'); 
} public function edit(Request $request, Payment $payment) 
{ return view('payments.edit', 
[ 'selectedCheckin' => $payment- 
>checkin, 
'data' => $this->checkinService->getBillAmount($payment->checkin), 
'payment' => $payment 
]); 
} 
/** 
*	Update a specific payment. 
* 
*	@param Request $request 
*	@param Payment $payment 
*	@return Payment|RedirectResponse 
*/ 19 4 public function update(Request $request, Payment $payment) 
{ return $this->paymentService->update($request, $payment->id) 
? back()->with('success', 'Payment information updated successfully.') 
: back()->with('error', 'Failed to update payment information'); 
} 
 
*	Delete a specific payment. 
* 
*	@param Payment $payment 
*	@return Application|RedirectResponse|Redirector 
*/ public function destroy(Payment $payment) 
{ return $this->paymentService->delete($payment->id) ? redirect(route('payments.index'))->with('success', 'Payment deleted successfuly.') 
: redirect(route('payments.index'))->with('error', 'Failed to delete payment.'); 
} 
} 
Restaurant <?php namespace App\Http\Controllers; use App\Http\Requests\StorePayment; 
19 4 use App\Http\Requests\UpdatePayment; 
use App\Models\CheckIn; 
use App\Repositories\CheckIn\CheckInRepositoryInterface; 
use App\Repositories\Payment\PaymentRepositoryInterface; 
use App\Services\CheckIn\CheckInServiceInterface;
use App\Services\Payment\PaymentServiceInterface; 
use App\Models\Payment;
use Illuminate\Contracts\Foundation\Application; 
use Illuminate\Contracts\View\Factory; 
use Illuminate\Http\RedirectResponse; 
use Illuminate\Http\Request;
use Illuminate\Http\Response; 
use Illuminate\Routing\Redirector;
use Illuminate\View\View; 
class PaymentController extends Controller 
{ protected $paymentRepository; protected $paymentService; protected $checkinRepository; protected $checkinService; 
*	PaymentController constructor. 
* 
*	@param PaymentRepositoryInterface $paymentRepository 
*	@param PaymentServiceInterface $paymentService 
*/ 19 4 public function construct(PaymentRepositoryInterface $paymentRepository, 
PaymentServiceInterface $paymentService, CheckInRepositoryInterface 
$checkinRepository, CheckInServiceInterface $checkinService) 
{ 
$this->paymentRepository = $paymentRepository; 
$this->paymentService = $paymentService; 
$this->checkinRepository = $checkinRepository; 
$this->checkinService = $checkinService; 
} 
/** 
*	Display the list of payments. 
*	*/ public function index() 
{ return view('payments.index', [ 
'payments' => $this->paymentRepository->all(), 
]); 
} 
/** 
*	Show the form to add new payment. 
* 
*	@return Application|Factory|View 
*/ public function create() 
{ 19 4 return view('payments.create', [ 
'checkins' => $this->checkinRepository->query() 
->doesntHave('payments')->get(), 
]); 
} 
*	Displays the payment addition form with the billing information. 
* 
*	@param CheckIn $checkin 
*	@return Application|Factory|View 
*/ public function createWithBilling(CheckIn $checkin) 
{ return view('payments.create', [ 
'checkins' => $this->checkinRepository->all(), 
'selectedCheckin' => $checkin, 
'data' => $this->checkinService->getBillAmount($checkin) 
]); 
} 
/** 
*	Add a new payment. 
* 
*	@param Request $request 
*	@param CheckIn $checkin 
*	@return Application|RedirectResponse|Redirector 
19 4 */ public function store(Request $request, CheckIn $checkin) 
{ 
$request->validate([ 
'discount' => 'nullable|numeric|min:0|max:1000000000', 
'payer' => 'required|in:agent,customer' 
]); 
return $this->paymentService->create($request) 
? redirect(route('payments.index'))->with('success', 'New payment added successfully.') 
: back()->with('error', 'New payment could not be added.'); 
} public function edit(Request $request, Payment $payment) 
{ return view('payments.edit', 
[ 'selectedCheckin' => $payment- 
>checkin, 
'data' => $this->checkinService->getBillAmount($payment->checkin), 
 
'payment' => $payment 
]); 
} 
/** 
*	Update a specific payment. 
* 
*	@param Request $request 
*	@param Payment $payment 
*	@return Payment|RedirectResponse 
*/ 19 4 public function update(Request $request, Payment $payment) 
{ return $this->paymentService->update($request, $payment->id) 
? back()->with('success', 'Payment information updated successfully.') 
: back()->with('error', 'Failed to update payment information'); 
} 
/** 
*	Delete a specific payment. 
* 
*	@param Payment $payment 
*	@return Application|RedirectResponse|Redirector 
*/ public function destroy(Payment $payment) 
{ return $this->paymentService->delete($payment->id) ? redirect(route('payments.index'))->with('success', 'Payment deleted successfuly.') 
: redirect(route('payments.index'))->with('error', 'Failed to delete payment.'); 
} 
} 
Role <?php namespace App\Http\Controllers; use App\Forms\Role\Store; use App\Forms\Role\Update; use App\Http\Controllers\Controller; 
19 4 use App\Http\Requests\StoreRole; use App\Http\Requests\UpdateRole; use App\Repositories\Role\RoleRepositoryInterface; use App\Services\Role\RoleServiceInterface; use App\Models\Role; use Illuminate\Auth\Access\AuthorizationException; use Illuminate\Contracts\View\Factory; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\Http\Response; use Illuminate\Routing\Redirector; use Illuminate\View\View; use App\Http\Resources\Role as RoleResource; use App\Http\Resources\RoleCollection; class RoleController extends Controller 
{ protected $roleRepository; protected $roleService; 
/** 
*	RoleController constructor. 
* 
*	@param RoleRepositoryInterface $roleRepository 
*	@param RoleServiceInterface $roleService 
*/ public function construct(RoleRepositoryInterface $roleRepository, 
RoleServiceInterface $roleService) 
{ 
19 4 
$this->roleRepository = $roleRepository; 
$this->roleService = $roleService; 
} 
/** 
*	Display a listing of the role. 
* 
*	@param Request $request 
*	@return Factory|View 
*	@throws \Exception 
*/ public function index(Request $request) 
{ 
$search = $request->search ?? ''; return view('uac.roles.index', [ 
'roles' => $this->roleRepository->all() 
]); 
} 
/** 
*	Display the form to create new user. 
* 
*	@return Factory|View 
*/ public function create() 
{ return view('components.form.index', 
[ 'setup' => (new Store())->setup() 
19 4 
]); 
} 
/** 
*	Store a newly created role in storage. 
* 
*	@param StoreRole $request 
*	@return RedirectResponse|Redirector 
*/ public function store(StoreRole $request) 
{ return $this->roleService->create($request) 
? redirect(route('roles.index'))->with('success', 'New role created successfully.') 
: back()->with('error', 'New role could not be created.'); 
} 
/** 
*	Display the specified role. 
* 
*	@param Role $role 
*	@return void 
*/ public function show(Role $role) 
{ abort(404); 
} 
/** 
19 4 
*	Display the form to update user. 
* 
*	@param Role $role 
*	@return Factory|View 
*/ public function edit(Role $role) 
{ return view('components.form.index', 
[ 'setup' => (new Update($role))- 
>setup() 
]); 
} 
/** 
*	Update the specified role in storage. 
* 
*	@param UpdateRole $request 
*	@param Role $role 
*	@return RedirectResponse|Redirector 
*/ public function update(UpdateRole $request, Role $role) 
{ return $this->roleService->update($request, $role->id) 
? redirect(route('roles.index'))->with('success', 'Role updated successfully.') 
: back()->with('error', 'The role could not be updated.'); 
} 
/** 
*	Remove the specified role from storage. 
19 4 
* 
*	@param Role $role 
*	@return RedirectResponse|Redirector 
*/ public function destroy(Role $role) 
{ return $this->roleService->delete($role->id) 
? redirect(route('roles.index'))->with('success', 'Role deleted successfully.') 
: back()->with('error', 'The role could not be deleted.'); 
} 
} 
Room <?php namespace App\Http\Controllers; use App\Forms\Room\Store; use App\Forms\Room\Update; use App\Http\Controllers\Controller; use App\Http\Requests\StoreRoom; use App\Http\Requests\UpdateRoom; use App\Repositories\Room\RoomRepositoryInterface; use App\Services\Room\RoomServiceInterface; use App\Models\Room; use Illuminate\Auth\Access\AuthorizationException; use Illuminate\Contracts\View\Factory; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; 
19 4 use Illuminate\Http\Response; use Illuminate\Routing\Redirector; use Illuminate\View\View; use App\Http\Resources\Room as RoomResource; use App\Http\Resources\RoomCollection; class RoomController extends Controller 
{ protected $roomRepository; protected $roomService; 
/** 
*	RoomController constructor. 
* 
*	@param RoomRepositoryInterface $roomRepository 
*	@param RoomServiceInterface $roomService 
*/ public function construct(RoomRepositoryInterface $roomRepository, 
RoomServiceInterface $roomService) 
{ 
$this->roomRepository = $roomRepository; 
$this->roomService = $roomService; 
} 
/** 
*	Display a listing of the room. 
* 
*	@return Factory|View 
*	@throws \Exception 
19 4 */ public function index() 
{ return view('components.table.rn', [ 
'records' => $this->roomRepository->all(), 
'pageTitle' => 'Configuration', 
'tableTitle' => 'Rooms', 
'routePrefix' => 'rooms', 
'label' => 'room' 
]); 
} 
/** 
*	Display the form to create new user. 
* 
*	@return Factory|View 
*/ public function create() 
{ return view('components.form.index', 
[ 'setup' => (new Store())->setup() 
]); 
} 
/** 
*	Store a newly created room in storage. 
* 
*	@param StoreRoom $request 
19 4 
*	@return RedirectResponse|Redirector 
*/ public function store(StoreRoom $request) 
{ return $this->roomService->create($request) 
? redirect(route('rooms.index'))->with('success', 'New room created successfully.') 
: back()->with('error', 'New room could not be created.'); 
} 
/** 
*	Display the specified room. 
* 
*	@param Room $room 
*	@return void 
*/ 
public function show(Room $room) 
{ abort(404); } 
/** 
*	Display the form to update user. 
* 
*	@param Room $room 
*	@return Factory|View 
*/ public function edit(Room $room) 
{ 19 4 return view('components.form.index', 
[ 'setup' => (new Update($room))- 
>setup() 
]); 
} 
/** 
*	Update the specified room in storage. 
* 
*	@param UpdateRoom $request 
*	@param Room $room 
*	@return RedirectResponse|Redirector 
*/ 
public function update(UpdateRoom $request, Room $room) 
{ return $this->roomService->update($request, $room->id) 
? redirect(route('rooms.index'))->with('success', 'Room updated successfully.') 
: back()->with('error', 'The room could not be updated.'); 
}
/** 
*	Remove the specified room from storage. 
* 
*	@param Room $room 
*	@return RedirectResponse|Redirector 
*/ public function destroy(Room $room) 
{ return $this->roomService->delete($room->id) 
19 4 
? redirect(route('rooms.index'))->with('success', 'Room deleted successfully.') 
: back()->with('error', 'The room could not be deleted.'); 
} 
} 
Room type <?php namespace App\Http\Controllers; use App\Forms\RoomType\Store; use App\Forms\RoomType\Update; use App\Http\Controllers\Controller; use App\Http\Requests\StoreRoomType; use App\Http\Requests\UpdateRoomType; use App\Repositories\RoomType\RoomTypeRepositoryInterface; use App\Services\RoomType\RoomTypeServiceInterface; use App\Models\RoomType; use Illuminate\Auth\Access\AuthorizationException; use Illuminate\Contracts\View\Factory; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\Http\Response; use Illuminate\Routing\Redirector; use Illuminate\View\View; use App\Http\Resources\RoomType as RoomTypeResource; use App\Http\Resources\RoomTypeCollection; class RoomTypeController extends Controller 
{ 19 4 
*/ 
public function checkout(Request $request, CheckIn $checkin) 
{ if($request->has('skipPayment') && $request->skipPayment === "true"){ return $this->checkinService->checkout($checkin); 
}else { return $this->checkinService->checkoutWithPayment($request, $checkin); 
} 
} 
} 19 4 
Customer <?php namespace App\Http\Controllers; use App\Http\Requests\StoreCustomer; use App\Http\Requests\UpdateCustomer; use App\Repositories\Customer\CustomerRepositoryInterface; use App\Services\Customer\CustomerServiceInterface; use App\Models\Customer; use Illuminate\Contracts\View\Factory; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\Http\Response; use Illuminate\Routing\Redirector; use Illuminate\Support\Facades\Auth; use Illuminate\View\View; class CustomerController extends Controller 
{ protected $customerRepository; protected $customerService; 
/** 
* CustomerController constructor. 
19 4 
* 
*	@param CustomerRepositoryInterface $customerRepository 
*	@param CustomerServiceInterface $customerService 
*/19 4 
/ 
public function construct(CustomerRepositoryInterface $customerRepository, 
CustomerServiceInterface $customerService) 
{
$this->customerRepository = $customerRepository; 
$this->customerService = $customerService; 
} 
/** 
*	Display a listing of the customer. 
* 
*	@return Factory|View 
*/ public function index() 
{ return view('customers.index', [ 
'customers' => $this->customerRepository->all() 
]); 
} 
/** 
*	Form to create a new customer. 
*	Form to create a new customer. 
* 
*	@return Factory|View 
*/ public function create() 
{ 19 4 return view('customers.form'); 
} 
/** 
*	Store a newly created customer in storage. 
* 
*	@param StoreCustomer $request 
*	@return RedirectResponse|Redirector 
*/ public function store(StoreCustomer $request) 
{ return$this->customerService->create($request)19 4 return $this->customerService->create($request) 
? redirect(route('customers.index'))->with('success', 'New customer created successfully.') 
: back()->with('error', 'New customer could not be created.'); 
}
/** 
*	Display the specified customer. 
* 
*	@param Customer $customer 
*	@return void 
*/ public function show(Customer $customer) 
{ abort(404); } 
/** 
19 4 
*	Form to update a new customer. 
* 
*	@param Customer $customer 
*	@return Factory|View 
*/ public function edit(Customer $customer) 
{ return view('customers.form', compact('customer')); 
} 
/** 
*	Update the specified customer in storage. 
* 
*	@param Request $request 
*	@param UpdateCustomer $customer 
*	@return RedirectResponse|Redirector 
*/ public function update(UpdateCustomer $request, Customer $customer) 
{ return $this->customerService->update($request, $customer->id) ? redirect(route('customers.index'))->with('success', 'Customer updated successfully.') 
19 4 
: back()->with('error', 'The customer could not be updated.'); 
} 
/** 
*	Remove the specified customer from storage. 
*
*	@param Customer $customer 
19 4 
* @return RedirectResponse|Redirector 
*/ public function destroy(Customer $customer) 
{ return $this->customerService->delete($customer->id) ? redirect(route('customers.index'))->with('success', 'Customer deleted successfully.') 
: back()->with('error', 'The customer could not be deleted.'); 
} 
} 
Food <?php namespace App\Http\Controllers; use App\Forms\Food\Store; use App\Forms\Food\Update; use App\Http\Controllers\Controller; use App\Http\Requests\StoreFood; use App\Http\Requests\UpdateFood; use App\Repositories\Food\FoodRepositoryInterface; use App\Services\Food\FoodServiceInterface; use App\Models\Food; use Illuminate\Auth\Access\AuthorizationException; use Illuminate\Contracts\View\Factory; use Illuminate\Http\RedirectResponse; use Illuminate\Http\Request; use Illuminate\Http\Response; use Illuminate\Routing\Redirector; 
19 4 use Illuminate\View\View; use App\Http\Resources\Food as FoodResource; use App\Http\Resources\FoodCollection; class FoodController extends Controller 
{ protected $foodRepository; protected$foodService;19 4 protected $foodService; 
/** 
*	FoodController constructor. 
* 
*	@param FoodRepositoryInterface $foodRepository 
*	@param FoodServiceInterface $foodService 
*/ public function construct(FoodRepositoryInterface $foodRepository, 
FoodServiceInterface $foodService) 
{ 
$this->foodRepository = $foodRepository; 
$this->foodService = $foodService; 
} 
/** 
*	Display a listing of the food. 
* 
*	@return Factory|View 
*	@throws \Exception 
*/ public function index() 
19 4 { return view('components.table.ndp', 
[ 'records' => $this->foodRepository- 
>all(), 'pageTitle' => 'Configuration', 
'tableTitle' => 'Menu Items', 
'routePrefix' => 'foods', 
'label' => 'menu item' 
]); 
} 
/** 
*	Display the form to create new user. 
* 
*	@return Factory|View 
*/ public function create() 
{ returnview('componentsformindex'19 4 return view( components.form.index , 
[ 'setup' => (new Store())->setup() 
]);
} 
/** 
*	Store a newly created food in storage. 
* 
*	@param StoreFood $request 
*	@return RedirectResponse|Redirector 
*/ 19 4 public function store(StoreFood $request) 
{ return $this->foodService->create($request) 
? redirect(route('foods.index'))->with('success', 'New food created successfully.') 
: back()->with('error', 'New food could not be created.'); 
} 
/** 
*	Display the specified food. 
* 
*	@param Food $food 
*	@return void 
*/ public function show(Food $food) 
{ abort(404); 
} 
/** 
*	Display the form to update user. 
* 
*	@param Food $food 
*	@return Factory|View 
*/ public function edit(Food $food) 
{ return view('components.form.index', ['setup'=>(newUpdate($food))-19 4 
[ setup => (new Update($food)) 
>setup() 
]); 
} 
19 4 
/** 
*	Update the specified food in storage. 
* 
*	@param UpdateFood $request 
*	@param Food $food 
*	@return RedirectResponse|Redirector 
*/ public function update(UpdateFood $request, Food $food) 
{ return $this->foodService->update($request, $food->id) 
? redirect(route('foods.index'))->with('success', 'Food updated successfully.') 
: back()->with('error', 'The food could not be updated.'); 
} 
/** 
*	Remove the specified food from storage. 
* 
*	@param Food $food 
*	@return RedirectResponse|Redirector 
*/ public function destroy(Food $food) 
{ return $this->foodService->delete($food->id) 
? redirect(route('foods.index'))->with('success', 'Food deleted successfully.') 
: back()->with('error', 'The food could not be deleted.'); 
19 4 
} 
} 
